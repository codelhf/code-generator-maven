#set($suffix = ${Template.getSuffix()})
## responseCode和serverResponse
#set($responseCodePackageName = ${responseCode.getPackageName()})
#set($serverResponsePackageName = ${serverResponse.getPackageName()})
## dao
#set($daoPackageName = ${dao.getPackageName()})
#set($daoSuffix = ${dao.getSuffix()})
## entityDTO
#set($entityDTOPackageName = ${entityDTO.getPackageName()})
#set($entityDTOSuffix = ${entityDTO.getSuffix()})
## entity
#set($entityPackageName = ${entity.getPackageName()})
#set($entitySuffix = ${entity.getSuffix()})
## service
#set($servicePackageName = ${service.getPackageName()})
#set($serviceSuffix = ${service.getSuffix()})
## primaryKey
#set($pkJavaType = ${pkColumn.javaType})
#set($pkPropertyName = ${pkColumn.propertyName})
package ${Template.getPackageName()};

import com.alibaba.fastjson.JSON;
import ${responseCodePackageName}.ResponseCode;
import ${serverResponsePackageName}.${ResponseClass};
import ${daoPackageName}.${ClassName}${daoSuffix};
import ${entityDTOPackageName}.${ClassName}${entityDTOSuffix};
import ${entityPackageName}.${ClassName}${entitySuffix};
import ${servicePackageName}.${ClassName}${serviceSuffix};
#if (${commonMapper} == false)
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
#else
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
import com.google.common.base.Splitter;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
* @Title: ${ClassName}${suffix}
* @Description: ${ClassName}${entitySuffix}业务层
* @Company: ${company}
* @Author: ${author}
* @CreateTime: ${createTime}
*/
@Service
public class ${ClassName}${suffix} implements ${ClassName}${serviceSuffix} {

    @Autowired
    private ${ClassName}${daoSuffix} ${className}${daoSuffix};

#if (${generateRemark} == true)
    /**
     * @Title: list
     * @Description: 查询${ClassName}${entitySuffix}列表
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param pageNum
     * @param pageSize
     * @param params
     * @return ${ResponseClass}<PageInfo>
     */
#end
#if (${commonMapper} == false)
    @Override
    public ${ResponseClass}<PageInfo> list(Integer pageNum, Integer pageSize, Map<String, String> params) {
        if (pageNum != null && pageSize != null) {
            PageHelper.startPage(pageNum, pageSize);
        }
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = null;
        if (CollectionUtils.isNotEmpty(params.values())) {
            ${className}${entitySuffix} = JSON.parseObject(JSON.toJSONString(params), ${ClassName}${entitySuffix}.class);
        }
        List<${ClassName}${entitySuffix}> ${className}${entitySuffix}List = ${className}${daoSuffix}.selectPageList(${className}${entitySuffix});
        List<${ClassName}${entityDTOSuffix}> ${className}${entityDTOSuffix}List = new ArrayList<>();
        BeanUtils.copyProperties(${className}${entitySuffix}List, ${className}${entityDTOSuffix}List, List.class);
        PageInfo pageInfo = new PageInfo(${className}${entitySuffix}List);
        pageInfo.setList(${className}${entityDTOSuffix}List);
        return ${ResponseClass}.createBySuccess(pageInfo);
    }
#else
    @Override
    public ${ResponseClass}<IPage> list(Integer pageNum, Integer pageSize, Map<String, String> params) {
        IPage<${ClassName}${entitySuffix}> page = new Page<>(pageNum, pageSize);
        QueryWrapper<${ClassName}${entitySuffix}> wrapper = new QueryWrapper<>();
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = null;
        for (Map.Entry<String, Object> entry: params.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            if (value instanceof String) {
                wrapper.like("${StringUtil.propertyName2ColumnName(key)}", value);
            } else {
                wrapper.eq("${StringUtil.propertyName2ColumnName(key)}", value);
            }
        }
        IPage<${ClassName}${entitySuffix}> ${className}${entitySuffix}List = ${className}${daoSuffix}.selectPage(page, wrapper);
        IPage<${ClassName}${entityDTOSuffix}> ${className}${entityDTOSuffix}List = new Page<>(pageNum, pageSize);
        BeanUtils.copyProperties(${className}${entitySuffix}List, ${className}${entityDTOSuffix}List, IPage.class);
        return ${ResponseClass}.createBySuccess(${className}${entityDTOSuffix}List);
    }
#end
#if (${generateRemark} == true)
    /**
     * @Title: select
     * @Description: 查询${ClassName}${entitySuffix}对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}
     * @return ${ResponseClass}<${ClassName}${entityDTOSuffix}>
     */
#end
#if (${commonMapper} == false)
    @Override
    public ${ResponseClass}<${ClassName}${entityDTOSuffix}> select(${pkJavaType} ${pkPropertyName}) {
        if (StringUtils.isBlank(String.valueOf(${pkPropertyName}))) {
            return ${ResponseClass}.createByErrorMessage("${pkPropertyName}不能为空");
        }
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = ${className}${daoSuffix}.selectByPrimaryKey(${pkPropertyName});
        if (${className}${entitySuffix} == null) {
            return ${ResponseClass}.createByErrorMessage("${ClassName}${entitySuffix}不存在");
        }
        ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix} = new ${ClassName}${entityDTOSuffix}();
        BeanUtils.copyProperties(${className}${entitySuffix}, ${className}${entityDTOSuffix});
        return ${ResponseClass}.createBySuccess(${className}${entityDTOSuffix});
    }
#else
    @Override
    public ${ResponseClass}<${ClassName}${entityDTOSuffix}> select(${pkJavaType} ${pkPropertyName}) {
        if (StringUtils.isBlank(String.valueOf(${pkPropertyName}))) {
            return ${ResponseClass}.createByErrorMessage("${pkPropertyName}不能为空");
        }
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = ${className}${daoSuffix}.selectById(${pkPropertyName});
        if (${className}${entitySuffix} == null) {
            return ${ResponseClass}.createByErrorMessage("${ClassName}${entitySuffix}不存在");
        }
        ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix} = new ${ClassName}${entityDTOSuffix}();
        BeanUtils.copyProperties(${className}${entitySuffix}, ${className}${entityDTOSuffix});
        return ${ResponseClass}.createBySuccess(${className}${entityDTOSuffix});
    }
#end
#if($isView == false)
#if (${generateRemark} == true)
    /**
     * @Title: insert
     * @Description: 保存${ClassName}${entitySuffix}对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${className}${entityDTOSuffix}
     * @return ${ResponseClass}<String>
     */
#end
#if (${commonMapper} == false)
    @Override
    public ${ResponseClass}<String> insert(${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = new ${ClassName}${entitySuffix}();
        BeanUtils.copyProperties(${className}${entityDTOSuffix}, ${className}${entitySuffix});
        int rowCount = ${className}${daoSuffix}.insertSelective(${className}${entitySuffix});
        if (rowCount == 0) {
            return ${ResponseClass}.createByErrorMessage("新增${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("新增${ClassName}${entitySuffix}成功");
    }
#else
    @Override
    public ${ResponseClass}<String> insert(${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = new ${ClassName}${entitySuffix}();
        BeanUtils.copyProperties(${className}${entityDTOSuffix}, ${className}${entitySuffix});
        int rowCount = ${className}${daoSuffix}.insert(${className}${entitySuffix});
        if (rowCount == 0) {
            return ${ResponseClass}.createByErrorMessage("新增${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("新增${ClassName}${entitySuffix}成功");
    }
#end
#if (${generateRemark} == true)
    /**
     * @Title: update
     * @Description: 更新${ClassName}${entitySuffix}对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}
     * @param ${className}${entityDTOSuffix}
     * @return ${ResponseClass}<String>
     */
#end
#if (${commonMapper} == false)
    @Override
    public ${ResponseClass}<String> update(${pkJavaType} ${pkPropertyName}, ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        if (StringUtils.isBlank(String.valueOf(${pkPropertyName}))) {
            return ${ResponseClass}.createByErrorMessage("${pkPropertyName}不能为空");
        }
        ${className}${entityDTOSuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(${pkPropertyName});
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = new ${ClassName}${entitySuffix}();
        BeanUtils.copyProperties(${className}${entityDTOSuffix}, ${className}${entitySuffix});
        int rowCount = ${className}${daoSuffix}.updateByPrimaryKeySelective(${className}${entitySuffix});
        if (rowCount == 0) {
            return ${ResponseClass}.createByErrorMessage("更新${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("更新${ClassName}${entitySuffix}成功");
    }
#else
    @Override
    public ${ResponseClass}<String> update(${pkJavaType} ${pkPropertyName}, ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        if (StringUtils.isBlank(String.valueOf(${pkPropertyName}))) {
            return ${ResponseClass}.createByErrorMessage("${pkPropertyName}不能为空");
        }
        ${className}${entityDTOSuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(${pkPropertyName});
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = new ${ClassName}${entitySuffix}();
        BeanUtils.copyProperties(${className}${entityDTOSuffix}, ${className}${entitySuffix});
        int rowCount = ${className}${daoSuffix}.updateById(${className}${entitySuffix});
        if (rowCount == 0) {
            return ${ResponseClass}.createByErrorMessage("更新${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("更新${ClassName}${entitySuffix}成功");
    }
#end
#if (${generateRemark} == true)
    /**
     * @Title: delete
     * @Description: 批量删除${ClassName}${entitySuffix}对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}s
     * @return ${ResponseClass}<String>
     */
#end
#if (${commonMapper} == false)
    @Override
    public ${ResponseClass}<String> delete(String ${pkPropertyName}s) {
        List<String> ${pkPropertyName}List = Splitter.on(",").splitToList(${pkPropertyName}s);
        if (CollectionUtils.isEmpty(${pkPropertyName}List)) {
            return ${ResponseClass}.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), "${pkPropertyName}不能为空");
        }
        int rowCount = ${className}${daoSuffix}.deleteByIdList(${pkPropertyName}List);
        if (rowCount == 0 || rowCount < ${pkPropertyName}List.size()) {
            return ${ResponseClass}.createByErrorMessage("批量删除${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("批量删除${ClassName}${entitySuffix}成功");
    }
#else
    @Override
    public ${ResponseClass}<String> delete(String ${pkPropertyName}s) {
        List<String> ${pkPropertyName}List = Splitter.on(",").splitToList(${pkPropertyName}s);
        if (CollectionUtils.isEmpty(${pkPropertyName}List)) {
            return ${ResponseClass}.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), "${pkPropertyName}不能为空");
        }
        int rowCount = ${className}${daoSuffix}.deleteBatchIds(${pkPropertyName}List);
        if (rowCount == 0 || rowCount < ${pkPropertyName}List.size()) {
            return ${ResponseClass}.createByErrorMessage("批量删除${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("批量删除${ClassName}${entitySuffix}成功");
    }
#end
#end
}
