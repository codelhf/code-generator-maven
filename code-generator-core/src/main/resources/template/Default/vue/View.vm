#set($apiPackageName = ${api.getPackageName()} + '/' + ${className} + ${api.getSuffix()})
<template>
  <div class="page-container">
    <!-- 搜索表单 -->
    <el-form :model="listQuery" :inline="true" label-width="120px" label-suffix=":">
      <el-row>
        <el-form-item label="关键字">
          <el-input v-model="listQuery.keyword" placeholder="请输入关键字" />
        </el-form-item>
      </el-row>
      <el-row>
        <el-col :span="24" style="text-align: center">
          <el-form-item>
            <el-button type="primary" icon="el-icon-search" @click="handleFilter">查询</el-button>
            <el-button type="primary" icon="el-icon-refresh" @click="handleReset">重置</el-button>
            <el-button type="primary" icon="el-icon-plus" @click="handleCreate">新增${ClassName}</el-button>
          </el-form-item>
        </el-col>
      </el-row>
    </el-form>
    <!-- 列表 -->
    <el-table
      :key="tableKey"
      v-loading="listLoading"
      :data="list"
      highlight-current-row
      border="border"
    >
#foreach($column in ${fullColumn})
      <el-table-column label="${column.comment}" align="center" width="100">
        <template slot-scope="scope">
          <span>{{ scope.row.${column.propertyName} }}</span>
        </template>
      </el-table-column>
#end
      <el-table-column label="操作" align="center" width="160">
        <template slot-scope="scope">
          <el-button size="mini" cricle title="编辑" icon="el-icon-edit-outline" @click="handleEdit(#set($a = 'scope.$index')$a, scope.row)"/>
          <el-popover :ref="#set($a = 'scope.$index')$a" placement="top" width="160" trigger="click">
            <p>确定删除吗？</p>
            <div style="text-align: right; margin: 0">
              <el-button size="mini" type="text" @click="cancelDelete(#set($a = 'scope.$index')$a)">取消</el-button>
              <el-button type="primary" size="mini" @click="handleDelete(#set($a = 'scope.$index')$a, scope.row)">确定</el-button>
            </div>
            <el-button size="mini" cricle title="删除" icon="el-icon-delete action_icon" slot="reference" />
          </el-popover>
        </template>
      </el-table-column>
    </el-table>
    <!-- 分页 -->
    <pagination
       v-show="total>0"
       :total="total"
       :page.sync="listQuery.currentPage"
       :limit.sync="listQuery.pageLimit"
       @pagination="getList" />
    <!-- dialog表单 -->
    <el-dialog
      :title="${className}.id ? '修改${ClassName}' : '新增${ClassName}'"
      :visible.sync="dialogFormVisible"
      @close="handleFormClose('${className}Form')"
    >
      <el-form ref="${className}Form" :model="${className}" :rules="${className}Rules" label-width="130px" label-suffix=":">
#foreach($column in ${fullColumn})
      <el-form-item label="${column.comment}" prop="${column.propertyName}">
        <el-input v-model="${className}.${column.propertyName}" placeholder="请输入${column.comment}" />
      </el-form-item>
#end
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="handleFormClose('${className}Form')">返回</el-button>
        <el-button type="primary" @click="handleSubmit('${className}Form')">确定</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
import { fetch${ClassName}List, fetch${ClassName}, create${ClassName}, update${ClassName}, delete${ClassName} } from '@/${apiPackageName}';
import Pagination from '@/components/Pagination';

export default {
  name: '${ClassName}',
  components: {
    Pagination
  },
  data() {
    return {
      tableKey: 0,
      list: [],
      total: 0,
      listLoading: true,
      listQuery: {
        currentPage: 1,
        pageLimit: 10,
        sort: '+update_time',
        keyword: ''
      },
      dialogFormVisible: false,
      ${className}: {
#set($size = ${fullColumn.size()})
#set($step = 0)
#foreach($column in ${fullColumn})
#set($step = $step + 1)
#if($step < $size)
        ${column.propertyName}: '',
#else
        ${column.propertyName}: ''
#end
#end
      },
      ${className}Rules: {
#set($size = ${fullColumn.size()})
#set($step = 0)
#foreach($column in ${fullColumn})
#set($step = $step + 1)
#if($step < $size)
        ${column.propertyName}: [{ required: true, message: '${column.comment}不能为空', trigger: 'blur' }],
#else
        ${column.propertyName}: [{ required: true, message: '${column.comment}不能为空', trigger: 'blur' }]
#end
#end
      }
    }
  },
  created() {
    this.getList();
  },
  methods: {
    getList() {
      this.listLoading = true;
      fetch${ClassName}List(this.listQuery)
        .then(response => {
          this.list = response.data;
          this.total = response.totalCount;
          // Just to simulate the time of the request
          setTimeout(() => {
            this.listLoading = false;
          }, 1.5 * 1000);
        });
    },
    handleFilter() {
      this.listQuery.currentPage = 1;
      this.getList();
    },
    handleReset() {
      this.listQuery = {
        currentPage: 1,
        pageLimit: 10,
        sort: '+update_time',
        keyword: ''
      }
    },
    handleCreate() {
      this.dialogFormVisible = true;
      this.${className} = {};
    },
    handleEdit(index, row) {
      fetch${ClassName}(row.id).then(res => {
        this.dialogFormVisible = true;
        this.${className} = res;
      });
    },
    cancelDelete: function(id) {
      #set($a = 'this.$refs[id].doClose();')$a
    },
    handleDelete: function(index, row) {
      delete${ClassName}(row.id).then(() => {
        #set($a = 'this.$refs[index].doClose();')$a
        this.#set($a = '$message')$a({
          type: 'success',
          message: '删除成功',
          duration: 1500,
          forbidClick: true
        });
        this.getList();
      });
    },
    handleFormClose: function(formName) {
      #set($a = 'this.$refs[formName].resetFields();')$a
      this.${className} = {};
      this.dialogFormVisible = false;
    },
    handleSubmit(formName) {
      #set($a = 'this.$refs[formName].validate')$a(valid => {
        if (valid) {
          if (!this.${className}.id) {
            create${ClassName}(this.${className}).then(res => {
              this.dialogFormVisible = false;
              this.getList();
            });
          } else {
            update${ClassName}(this.${className}).then(res => {
              this.dialogFormVisible = false;
              this.getList();
            });
          }
        }
      });
    }
  }
}
</script>

<style scoped>

</style>
