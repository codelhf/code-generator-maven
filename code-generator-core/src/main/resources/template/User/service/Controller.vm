#set($suffix = ${Template.getSuffix()})
## entityDTO、entity
#set($entityDTOPackageName = ${entityDTO.getPackageName()})
#set($entityDTOSuffix = ${entityDTO.getSuffix()})
#set($entitySuffix = ${entity.getSuffix()})
## service
#set($servicePackageName = ${service.getPackageName()})
#set($serviceSuffix = ${service.getSuffix()})
## primaryKey
#set($pkJavaType = ${pkColumn.javaType})
#set($pkPropertyName = ${pkColumn.propertyName})
package ${Template.getPackageName()};

import ${entityDTOPackageName}.${ClassName}${entityDTOSuffix};
import ${servicePackageName}.${ClassName}${serviceSuffix};
import com.sitech.cmap.fw.core.wsg.WsgResult;
import com.sitech.cmap.fw.core.wsg.WsgPageResult;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * @Title: ${ClassName}${suffix}
 * @Description: ${ClassName}${entitySuffix}控制层
 * @Company: ${company}
 * @Author: ${author}
 * @CreateTime: ${createTime}
 */
#if (${httpPrefix})
    #set($RequestMapping = "${httpPrefix}/${className}")
#else
    #set($RequestMapping = "${className}")
#end
@RestController
@RequestMapping("/${RequestMapping}")
public class ${ClassName}${suffix} {

    @Autowired
    private ${ClassName}${serviceSuffix} ${className}${serviceSuffix};

#if (${generateSwagger} == true)
    @ApiOperation(value = "查询 ${ClassName}${entitySuffix} 列表")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", dataType = "String", required = true, paramType = "header",
                    value = "请求Token参数"),
            @ApiImplicitParam(name = "params", dataType = "Map", required = false, paramType = "query",
                    value = "请求参数对象测试，用户支持Get多参数接收"),
            @ApiImplicitParam(name = "currentPage", dataType = "int", required = false, paramType = "query",
                    value = "当前页数"),
            @ApiImplicitParam(name = "pageLimit", dataType = "int", required = false, paramType = "query",
                    value = "每页记录条数"),
            @ApiImplicitParam(name = "condition", dataType = "String", required = false, paramType = "query",
                    value = "模糊查询表达式，默认只支持一个String类型字符串模糊查询"),
            @ApiImplicitParam(name = "sort", dataType = "String", required = false, paramType = "query",
                    value = "排序字段，例：-id(id降序)，+name（name升序）,目前支持单字段")
    })
#end
    @GetMapping("")
    public WsgPageResult<List> list(@RequestParam(name = "params", required = false) Map<String, Object> params,
                                    @RequestParam(name = "currentPage", required = false) Integer currentPage,
                                    @RequestParam(name = "pageLimit", required = false) Integer pageLimit,
                                    @RequestParam(name = "condition", required = false) String condition,
                                    @RequestParam(name = "sort", required = false) String sort) {
        int total = ${className}${serviceSuffix}.total(params, condition);
        List<${ClassName}${entityDTOSuffix}> ${className}${entityDTOSuffix}List = ${className}${serviceSuffix}.list(currentPage, pageLimit, params, condition, sort);
        if (currentPage == null || pageLimit == null) {
            return new WsgPageResult<>(${className}${entityDTOSuffix}List, 0, 0, total);
        }
        return new WsgPageResult<>(${className}${entityDTOSuffix}List, currentPage, pageLimit, total);
    }

#if (${generateSwagger} == true)
    @ApiOperation(value = "根据ID查询 ${ClassName}${entitySuffix} 对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", dataType = "String", required = true, paramType = "header",
                    value = "请求Token参数"),
            @ApiImplicitParam(name = "id", dataType = "${pkJavaType}", required = true, paramType = "path",
                    value = "唯一标识（主键）")
    })
#end
    @GetMapping("/{id}")
    public ${ResponseClass}<${ClassName}${entityDTOSuffix}> get(@PathVariable("id") ${pkJavaType} id) {
        if (StringUtils.isBlank(String.valueOf(id))) {
            return ${ResponseClass}.createByError("id不能为空");
        }
        ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix} = ${className}${serviceSuffix}.get(id);
        if (${className}${entityDTOSuffix} == null) {
            return ${ResponseClass}.createByError("${ClassName}${entityDTOSuffix}不存在");
        }
        return ${ResponseClass}.createBySuccess(${className}${entityDTOSuffix});
    }

#if(${isView} == false)
#if (${generateSwagger} == true)
    @ApiOperation(value = "保存 ${ClassName}${entitySuffix} 对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", dataType = "String", required = true, paramType = "header",
                    value = "请求Token参数"),
            @ApiImplicitParam(name = "${className}${entityDTOSuffix}", dataType = "${ClassName}${entityDTOSuffix}", required = true, paramType = "body",
                    value = "保存数据消息体")
    })
#end
    @PostMapping("")
    public ${ResponseClass}<String> save(@RequestBody ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        int rowCount = ${className}${serviceSuffix}.save(${className}${entityDTOSuffix});
        if (rowCount != 1) {
            return ${ResponseClass}.createByError("新增${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("新增${ClassName}${entitySuffix}成功");
    }

#if (${generateSwagger} == true)
    @ApiOperation(value = "根据ID更新 ${ClassName}${entitySuffix} 对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", dataType = "String", required = true, paramType = "header",
                    value = "请求Token参数"),
            @ApiImplicitParam(name = "id", dataType = "${pkJavaType}", required = true, paramType = "path",
                    value = "唯一标识（主键）"),
            @ApiImplicitParam(name = "${className}${entityDTOSuffix}", dataType = "${ClassName}${entityDTOSuffix}", required = true, paramType = "body",
                    value = "更新数据消息体")
    })
#end
    @PutMapping("/{id}")
    public ${ResponseClass}<String> update(@PathVariable("id") ${pkJavaType} id, @RequestBody ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        if (StringUtils.isBlank(String.valueOf(id))) {
            return ${ResponseClass}.createByError("id不能为空");
        }
        int rowCount = ${className}${serviceSuffix}.update(id, ${className}${entityDTOSuffix});
        if (rowCount != 1) {
            return ${ResponseClass}.createByError("修改${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("修改${ClassName}${entitySuffix}成功");
    }

#if (${generateSwagger} == true)
    @ApiOperation(value = "批量删除 ${ClassName}${entitySuffix} 对象")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", dataType = "String", required = true, paramType = "header",
                    value = "请求Token参数"),
            @ApiImplicitParam(name = "ids", dataType = "String", required = true, paramType = "path",
                    value = "唯一标识（主键），若批量，则ID以','分割")
    })
#end
    @DeleteMapping("/{ids}")
    public ${ResponseClass}<String> delete(@PathVariable("ids") String ids) {
        List<String> ${pkPropertyName}List = Arrays.asList(ids.split(","));
        if (CollectionUtils.isEmpty(${pkPropertyName}List)) {
            return ${ResponseClass}.createByError("ids不能为空");
        }
        int rowCount = ${className}${serviceSuffix}.delete(${pkPropertyName}List);
        if (rowCount == 0 || rowCount < ${pkPropertyName}List.size()) {
            return ${ResponseClass}.createByError("批量删除${ClassName}${entitySuffix}失败");
        }
        return ${ResponseClass}.createBySuccessMessage("批量删除${ClassName}${entitySuffix}成功");
    }
#end
}
