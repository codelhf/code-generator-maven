#set($suffix = ${Template.getSuffix()})
#set($pageUtilPackageName = ${pageUtil.getPackageName()})
## dao
#set($daoPackageName = ${dao.getPackageName()})
#set($daoSuffix = ${dao.getFileName()})
## entityDTO
#set($entityDTOPackageName = ${entityDTO.getPackageName()})
#set($entityDTOSuffix = ${entityDTO.getSuffix()})
## entity
#set($entityPackageName = ${entity.getPackageName()})
#set($entitySuffix = ${entity.getSuffix()})
## service
#set($servicePackageName = ${service.getPackageName()})
#set($serviceSuffix = ${service.getSuffix()})
## primaryKey
#set($pkJavaType = ${pkColumn.javaType})
#set($pkPropertyName = ${pkColumn.propertyName})
package ${Template.getPackageName()};

import com.alibaba.fastjson.JSON;
import ${daoPackageName}.${ClassName}${daoSuffix};
import ${entityDTOPackageName}.${ClassName}${entityDTOSuffix};
import ${entityPackageName}.${ClassName}${entitySuffix};
import ${servicePackageName}.${ClassName}${serviceSuffix};
import com.sitech.cmap.fw.core.common.EmptyValidator;
import com.sitech.cmap.fw.core.common.bean.BeanConvertor;
import com.sitech.cmap.fw.core.common.string.UUIDGenerator;
import ${pageUtilPackageName}.PageUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.entity.Example;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
* @Title: ${ClassName}${suffix}
* @Description: ${ClassName}${entitySuffix}业务层
* @Company: ${company}
* @Author: ${author}
* @CreateTime: ${createTime}
*/
@Service
public class ${ClassName}${suffix} implements ${ClassName}${serviceSuffix} {

    @Autowired
    private ${ClassName}${daoSuffix} ${className}${daoSuffix};

#if (${generateRemark} == true)
    /**
     * @Title: list
     * @Description: 查询 ${ClassName}${entitySuffix} 列表
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param pageNum
     * @param pageSize
     * @param params
     * @param condition
     * @param sortKeys
     * @return List<${ClassName}${entityDTOSuffix}>
     */
#end
    @Override
    public List<${ClassName}${entityDTOSuffix}> list(Integer pageNum, Integer pageSize, Map<String, Object> params, String condition, String... sortKeys) {
        if (pageNum != null && pageSize != null) {
            PageUtil.initPage(pageNum, pageSize, sortKeys);
        }
        ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix} = null;
        if (params != null && params.size() > 6) {
            ${className}${entityDTOSuffix} = JSON.parseObject(JSON.toJSONString(params), ${ClassName}${entityDTOSuffix}.class);
        }
        List<${ClassName}${entitySuffix}> ${className}${entitySuffix}List = new ArrayList<>();
        if (EmptyValidator.isNotEmpty(${className}${entityDTOSuffix})) {
            ${className}${entitySuffix}List = ${className}${daoSuffix}.selectByExample(initExample(${className}${entityDTOSuffix}));
        } else if (EmptyValidator.isNotEmpty(condition)) {
            ${className}${entitySuffix}List = ${className}${daoSuffix}.selectByExample(initFuzzyExample(condition));
        } else {
            ${className}${entitySuffix}List = ${className}${daoSuffix}.selectAll();
        }
        return BeanConvertor.getCopyList(${ClassName}${entityDTOSuffix}.class, ${className}${entitySuffix}List);
    }

#if (${generateRemark} == true)
    /**
     * @Title: list
     * @Description: 查询 ${ClassName}${entitySuffix} 列表总量
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param params
     * @param condition
     * @return int
     */
#end
    @Override
    public int total(Map<String, Object> params, String condition) {
        ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix} = null;
        if (params != null && params.size() > 6) {
            ${className}${entityDTOSuffix} = JSON.parseObject(JSON.toJSONString(params), ${ClassName}${entityDTOSuffix}.class);
        }
        int ${className}${entitySuffix}Total = 0;
        if (EmptyValidator.isNotEmpty(${className}${entityDTOSuffix})) {
            ${className}${entitySuffix}Total = ${className}${daoSuffix}.selectCountByExample(initExample(${className}${entityDTOSuffix}));
        } else if (EmptyValidator.isNotEmpty(condition)) {
            ${className}${entitySuffix}Total = ${className}${daoSuffix}.selectCountByExample(initFuzzyExample(condition));
        } else {
            ${className}${entitySuffix}Total = ${className}${daoSuffix}.selectCount(null);
        }
        return ${className}${entitySuffix}Total;
    }

#if (${generateRemark} == true)
    /**
     * @Title: get
     * @Description: 查询 ${ClassName}${entitySuffix} 对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}
     * @return ${ClassName}${entityDTOSuffix}
     */
#end
    @Override
    public ${ClassName}${entityDTOSuffix} get(${pkJavaType} ${pkPropertyName}) {
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = ${className}${daoSuffix}.selectByPrimaryKey(${pkPropertyName});
        return BeanConvertor.getCopyObject(${ClassName}${entityDTOSuffix}.class, ${className}${entitySuffix});
    }

#if($isView == false)
#if (${generateRemark} == true)
    /**
     * @Title: save
     * @Description: 保存 ${ClassName}${entitySuffix} 对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${className}${entityDTOSuffix}
     * @return int
     */
#end
    @Override
    public int save(${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
#if(${pkJavaType} == 'String')
        ${className}${entityDTOSuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(UUIDGenerator.create());
#end
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = BeanConvertor.getCopyObject(${ClassName}${entitySuffix}.class, ${className}${entityDTOSuffix});
        return ${className}${daoSuffix}.insertSelective(${className}${entitySuffix});
    }

#if (${generateRemark} == true)
    /**
     * @Title: update
     * @Description: 更新 ${ClassName}${entitySuffix} 对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}
     * @param ${className}${entityDTOSuffix}
     * @return int
     */
#end
    @Override
    public int update(${pkJavaType} ${pkPropertyName}, ${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        ${className}${entityDTOSuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(${pkPropertyName});
        ${ClassName}${entitySuffix} ${className}${entitySuffix} = BeanConvertor.getCopyObject(${ClassName}${entitySuffix}.class, ${className}${entityDTOSuffix});
        return ${className}${daoSuffix}.updateByPrimaryKeySelective(${className}${entitySuffix});
    }

#if (${generateRemark} == true)
    /**
     * @Title: delete
     * @Description: 批量删除 ${ClassName}${entitySuffix} 对象
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param ${pkPropertyName}List
     * @return int
     */
#end
    @Override
    public int delete(List<String> ${pkPropertyName}List) {
        List<${ClassName}${entitySuffix}> ${className}${entitySuffix}List = new ArrayList<>();
        for(String id: ${pkPropertyName}List) {
            ${ClassName}${entitySuffix} ${className}${entitySuffix} = new ${ClassName}${entitySuffix}();
#if(${pkJavaType} == 'String')
            ${className}${entitySuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(id);
#else
            ${className}${entitySuffix}.set${StringUtil.firstToUpperCase(${pkPropertyName})}(Integer.parseInt(id));
#end
            ${className}${entitySuffix}List.add(${className}${entitySuffix});
        }
        return ${className}${daoSuffix}.deleteBatchByIds(${className}${entitySuffix}List);
    }
#end

    /**
     * @Title: initExample
     * @Description: 根据查詢条件构建精确查询Example，可根据实际情况进行字段模糊查询修改
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param [ ${className}${entityDTOSuffix} ]
     * @return tk.mybatis.mapper.entity.Example
     */
    private Example initExample(${ClassName}${entityDTOSuffix} ${className}${entityDTOSuffix}) {
        Example example = new Example(${ClassName}${entitySuffix}.class);

        Example.Criteria criteriaName = example.createCriteria();
#foreach($column in ${fullColumn})
        if (EmptyValidator.isNotEmpty(${className}${entityDTOSuffix}.get${StringUtil.firstToUpperCase(${column.propertyName})}())) {
            criteriaName.andEqualTo("${column.propertyName}", ${className}${entityDTOSuffix}.get${StringUtil.firstToUpperCase(${column.propertyName})}());
        }
#end
        return example;
    }

    /**
     * @Title: initFuzzyExample
     * @Description: 根据唯一模糊条件构建模糊查询Example
     * @Company: ${company}
     * @Author: ${author}
     * @CreateTime: ${createTime}
     *
     * @param [condition]
     * @return tk.mybatis.mapper.entity.Example
     */
    private Example initFuzzyExample(String condition) {
        Example example = new Example(${ClassName}${entitySuffix}.class);

        Example.Criteria criteria = example.createCriteria();
#foreach($column in ${fullColumn})
        criteria.orLike("${column.propertyName}", "%" + condition + "%");
#end
        return example;
    }
}
